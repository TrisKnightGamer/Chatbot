{"ast":null,"code":"import { useCallback, useRef, useState } from \"react\";\n\nconst useLongPress = (onLongPress, onClick, {\n  shouldPreventDefault = true,\n  delay = 300\n} = {}) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n  const start = useCallback(event => {\n    if (shouldPreventDefault && event.target) {\n      event.target.addEventListener(\"touchend\", preventDefault, {\n        passive: false\n      });\n      target.current = event.target;\n    }\n\n    timeout.current = setTimeout(() => {\n      onLongPress(event);\n      setLongPressTriggered(true);\n    }, delay);\n  }, [onLongPress, delay, shouldPreventDefault]);\n  const clear = useCallback((event, shouldTriggerClick = true) => {\n    timeout.current && clearTimeout(timeout.current);\n    shouldTriggerClick && !longPressTriggered && onClick();\n    setLongPressTriggered(false);\n\n    if (shouldPreventDefault && target.current) {\n      target.current.removeEventListener(\"touchend\", preventDefault);\n    }\n  }, [shouldPreventDefault, onClick, longPressTriggered]);\n  return {\n    onMouseDown: e => start(e),\n    onTouchStart: e => start(e),\n    onMouseUp: e => clear(e),\n    onMouseLeave: e => clear(e, false),\n    onTouchEnd: e => clear(e)\n  };\n};\n\nconst isTouchEvent = event => {\n  return \"touches\" in event;\n};\n\nconst preventDefault = event => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default useLongPress;","map":{"version":3,"sources":["C:/Users/Trihd/OneDrive/chatbot_NEW/frontend/src/components/SendMessageForm/useLongPress.js"],"names":["useCallback","useRef","useState","useLongPress","onLongPress","onClick","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","timeout","target","start","event","addEventListener","preventDefault","passive","current","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","e","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","isTouchEvent","touches","length"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;;AAEA,MAAMC,YAAY,GAAG,CACjBC,WADiB,EAEjBC,OAFiB,EAGjB;AAAEC,EAAAA,oBAAoB,GAAG,IAAzB;AAA+BC,EAAAA,KAAK,GAAG;AAAvC,IAA+C,EAH9B,KAIZ;AACL,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAMQ,OAAO,GAAGT,MAAM,EAAtB;AACA,QAAMU,MAAM,GAAGV,MAAM,EAArB;AAEA,QAAMW,KAAK,GAAGZ,WAAW,CACrBa,KAAK,IAAI;AACL,QAAIP,oBAAoB,IAAIO,KAAK,CAACF,MAAlC,EAA0C;AAClCE,MAAAA,KAAK,CAACF,MAAN,CAAaG,gBAAb,CAA8B,UAA9B,EAA0CC,cAA1C,EAA0D;AAC1DC,QAAAA,OAAO,EAAE;AADiD,OAA1D;AAGJL,MAAAA,MAAM,CAACM,OAAP,GAAiBJ,KAAK,CAACF,MAAvB;AACH;;AACDD,IAAAA,OAAO,CAACO,OAAR,GAAkBC,UAAU,CAAC,MAAM;AAC/Bd,MAAAA,WAAW,CAACS,KAAD,CAAX;AACAJ,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH,KAH2B,EAGzBF,KAHyB,CAA5B;AAIH,GAZoB,EAarB,CAACH,WAAD,EAAcG,KAAd,EAAqBD,oBAArB,CAbqB,CAAzB;AAgBA,QAAMa,KAAK,GAAGnB,WAAW,CACrB,CAACa,KAAD,EAAQO,kBAAkB,GAAG,IAA7B,KAAsC;AAClCV,IAAAA,OAAO,CAACO,OAAR,IAAmBI,YAAY,CAACX,OAAO,CAACO,OAAT,CAA/B;AACAG,IAAAA,kBAAkB,IAAI,CAACZ,kBAAvB,IAA6CH,OAAO,EAApD;AACAI,IAAAA,qBAAqB,CAAC,KAAD,CAArB;;AACA,QAAIH,oBAAoB,IAAIK,MAAM,CAACM,OAAnC,EAA4C;AACxCN,MAAAA,MAAM,CAACM,OAAP,CAAeK,mBAAf,CAAmC,UAAnC,EAA+CP,cAA/C;AACH;AACJ,GARoB,EASrB,CAACT,oBAAD,EAAuBD,OAAvB,EAAgCG,kBAAhC,CATqB,CAAzB;AAYA,SAAO;AACHe,IAAAA,WAAW,EAAEC,CAAC,IAAIZ,KAAK,CAACY,CAAD,CADpB;AAEHC,IAAAA,YAAY,EAAED,CAAC,IAAIZ,KAAK,CAACY,CAAD,CAFrB;AAGHE,IAAAA,SAAS,EAAEF,CAAC,IAAIL,KAAK,CAACK,CAAD,CAHlB;AAIHG,IAAAA,YAAY,EAAEH,CAAC,IAAIL,KAAK,CAACK,CAAD,EAAI,KAAJ,CAJrB;AAKHI,IAAAA,UAAU,EAAEJ,CAAC,IAAIL,KAAK,CAACK,CAAD;AALnB,GAAP;AAOH,CA5CD;;AA8CA,MAAMK,YAAY,GAAGhB,KAAK,IAAI;AAC9B,SAAO,aAAaA,KAApB;AACC,CAFD;;AAIA,MAAME,cAAc,GAAGF,KAAK,IAAI;AAChC,MAAI,CAACgB,YAAY,CAAChB,KAAD,CAAjB,EAA0B;;AAE1B,MAAIA,KAAK,CAACiB,OAAN,CAAcC,MAAd,GAAuB,CAAvB,IAA4BlB,KAAK,CAACE,cAAtC,EAAsD;AAClDF,IAAAA,KAAK,CAACE,cAAN;AACH;AACA,CAND;;AAQA,eAAeZ,YAAf","sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\nconst useLongPress = (\r\n    onLongPress,\r\n    onClick,\r\n    { shouldPreventDefault = true, delay = 300 } = {}\r\n    ) => {\r\n    const [longPressTriggered, setLongPressTriggered] = useState(false);\r\n    const timeout = useRef();\r\n    const target = useRef();\r\n\r\n    const start = useCallback(\r\n        event => {\r\n            if (shouldPreventDefault && event.target) {\r\n                    event.target.addEventListener(\"touchend\", preventDefault, {\r\n                    passive: false\r\n                });\r\n                target.current = event.target;\r\n            }\r\n            timeout.current = setTimeout(() => {\r\n                onLongPress(event);\r\n                setLongPressTriggered(true);\r\n            }, delay);\r\n        },\r\n        [onLongPress, delay, shouldPreventDefault]\r\n    );\r\n\r\n    const clear = useCallback(\r\n        (event, shouldTriggerClick = true) => {\r\n            timeout.current && clearTimeout(timeout.current);\r\n            shouldTriggerClick && !longPressTriggered && onClick();\r\n            setLongPressTriggered(false);\r\n            if (shouldPreventDefault && target.current) {\r\n                target.current.removeEventListener(\"touchend\", preventDefault);\r\n            }\r\n        },\r\n        [shouldPreventDefault, onClick, longPressTriggered]\r\n    );\r\n\r\n    return {\r\n        onMouseDown: e => start(e),\r\n        onTouchStart: e => start(e),\r\n        onMouseUp: e => clear(e),\r\n        onMouseLeave: e => clear(e, false),\r\n        onTouchEnd: e => clear(e)\r\n    };\r\n};\r\n\r\nconst isTouchEvent = event => {\r\nreturn \"touches\" in event;\r\n};\r\n\r\nconst preventDefault = event => {\r\nif (!isTouchEvent(event)) return;\r\n\r\nif (event.touches.length < 2 && event.preventDefault) {\r\n    event.preventDefault();\r\n}\r\n};\r\n\r\nexport default useLongPress;"]},"metadata":{},"sourceType":"module"}