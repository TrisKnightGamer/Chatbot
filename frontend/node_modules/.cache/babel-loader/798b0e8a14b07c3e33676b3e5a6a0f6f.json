{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trihd\\\\OneDrive\\\\chatbot_NEW\\\\frontend\\\\src\\\\components\\\\SendMessageForm\\\\index.js\";\nimport React, { Component } from 'react';\nimport { TextField } from \"@material-ui/core\";\nimport useLongPress from \"./useLongPress\"; //import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n// import Icon  from \"@material-ui/icons\";\n\nimport './style.css';\nexport default class SendMessageForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\"\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.setState({\n      message: this.state.message.replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n    });\n\n    if (this.state.message === \"\") {\n      return;\n    } else {\n      fetch('http://192.168.1.253:5000/api/v1/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          content: this.state.message,\n          isBot: false,\n          time: new Date().getTime() / 1000\n        })\n      }).then(res => {\n        if (res.status === 200) {\n          console.log(\"Send message successfully\");\n          res.json().then(postResponse => {\n            console.log(postResponse);\n            fetch('http://192.168.1.253:5000/api/v1/messages/reply', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n              },\n              body: JSON.stringify({\n                content: postResponse.content,\n                isBot: false,\n                time: new Date().getTime() / 1000\n              })\n            }).then(res => {\n              if (res.status === 200) {\n                console.log(\"Wait for reply ...\");\n              } else {\n                console.log(\"Some error occured\");\n              }\n            });\n          });\n        } else {\n          console.log(\"Some error occured\");\n        }\n      }).then(this.setState({\n        message: \"\"\n      }));\n    }\n  }\n\n  handleEnter(e) {\n    if (e.keyCode === 13) {\n      return this.handleSubmit(e);\n    }\n\n    return;\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"SendMessageForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-input-width-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"MessageForm\",\n      onKeyUp: this.handleEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"sender\",\n      type: \"button\",\n      onClick: e => this.handleSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/assets/img/send-button.png\",\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      name: \"message\",\n      id: \"outlined-multiline-static\",\n      fullWidth: true,\n      multiline: true,\n      rows: \"4\",\n      value: this.state.message,\n      placeholder: \"Type something here\",\n      className: \"chat-input\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"voice\",\n      type: \"button\",\n      onClick: e => this.handleSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n    this.handleButtonRelease = this.handleButtonRelease.bind(this);\n  }\n\n  handleButtonPress() {\n    this.buttonPressTimer = setTimeout(() => alert('long press activated'), 1500);\n  }\n\n  handleButtonRelease() {\n    clearTimeout(this.buttonPressTimer);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onTouchStart: this.handleButtonPress,\n      onTouchEnd: this.handleButtonRelease,\n      onMouseDown: this.handleButtonPress,\n      onMouseUp: this.handleButtonRelease,\n      onMouseLeave: this.handleButtonRelease,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Button\");\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Trihd/OneDrive/chatbot_NEW/frontend/src/components/SendMessageForm/index.js"],"names":["React","Component","TextField","useLongPress","SendMessageForm","constructor","props","state","message","handleEnter","bind","handleSubmit","onChange","e","preventDefault","setState","replace","fetch","method","headers","Accept","body","JSON","stringify","content","isBot","time","Date","getTime","then","res","status","console","log","json","postResponse","keyCode","target","name","value","render","App","handleButtonPress","handleButtonRelease","buttonPressTimer","setTimeout","alert","clearTimeout"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {TextField} from \"@material-ui/core\";\nimport useLongPress from \"./useLongPress\";\n//import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n// import Icon  from \"@material-ui/icons\";\nimport './style.css'\nexport default class SendMessageForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.handleEnter = this\n            .handleEnter\n            .bind(this)\n        this.handleSubmit = this\n            .handleSubmit\n            .bind(this)\n        this.onChange = this\n            .onChange\n            .bind(this)\n    }\n    async handleSubmit(e) {\n        e.preventDefault()\n        await this.setState({\n            message: this\n                .state\n                .message\n                .replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n        })\n\n        if (this.state.message === \"\") {\n            return\n        } else {\n            fetch('http://192.168.1.253:5000/api/v1/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json'\n                },\n                body: JSON.stringify({\n                    content: this.state.message,\n                    isBot: false,\n                    time: (new Date().getTime()) / 1000\n                })\n            }).then(res => {\n                if (res.status === 200) {\n                    console.log(\"Send message successfully\")\n                    res\n                        .json()\n                        .then(postResponse => {\n                            console.log(postResponse);\n                            \n                            fetch('http://192.168.1.253:5000/api/v1/messages/reply', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    Accept: 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    content: postResponse.content,\n                                    isBot: false,\n                                    time: (new Date().getTime()) / 1000\n                                })\n                            }).then(res => {\n                                if (res.status === 200) {\n                                    console.log(\"Wait for reply ...\")\n                                } else {\n                                    console.log(\"Some error occured\");\n\n                                }\n                            })\n                        })\n\n                } else {\n                    console.log(\"Some error occured\");\n                }\n            }).then(this.setState({message: \"\"}))\n\n        }\n\n    }\n    handleEnter(e) {\n        if (e.keyCode === 13) {\n            return this.handleSubmit(e)\n        }\n        return\n    }\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    render() {\n        return (\n            <div className=\"SendMessageForm\">\n                <div className=\"chat-input-width-100\">\n                    <form className=\"MessageForm\" onKeyUp={this.handleEnter}>\n                        <button className=\"sender\" type=\"button\" onClick={(e) => this.handleSubmit(e)}>\n                            <img src=\"/assets/img/send-button.png\" alt=\"\"/>\n                        </button>\n                        <TextField\n                            name=\"message\"\n                            id=\"outlined-multiline-static\"\n                            fullWidth={true}\n                            multiline\n                            rows=\"4\"\n                            value={this.state.message}\n                            placeholder=\"Type something here\"\n                            className=\"chat-input\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.onChange}/>    \n                        <button className=\"voice\" type=\"button\" onClick={(e) => this.handleSubmit(e)}>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass App extends Component {\n    constructor() {\n      super()\n      this.handleButtonPress = this.handleButtonPress.bind(this)\n      this.handleButtonRelease = this.handleButtonRelease.bind(this)\n    }\n    handleButtonPress () {\n      this.buttonPressTimer = setTimeout(() => alert('long press activated'), 1500);\n    }\n    \n    handleButtonRelease () {\n      clearTimeout(this.buttonPressTimer);\n    }\n    render() {\n        return (\n          <div \n              onTouchStart={this.handleButtonPress} \n              onTouchEnd={this.handleButtonRelease} \n              onMouseDown={this.handleButtonPress} \n              onMouseUp={this.handleButtonRelease} \n              onMouseLeave={this.handleButtonRelease}>\n            Button\n          </div>\n        );\n      }\n    }\n\n"]},"metadata":{},"sourceType":"module"}