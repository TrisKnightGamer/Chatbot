{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trihd\\\\OneDrive\\\\chatbot_NEW\\\\frontend\\\\src\\\\components\\\\SendMessageForm\\\\index.js\";\nimport React, { Component } from 'react';\nimport { TextField } from \"@material-ui/core\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'; // import Icon  from \"@material-ui/icons\";\n\nimport './style.css';\nexport default class SendMessageForm extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      message: \"\",\n      alert: true\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n    this.handleButtonRelease = this.handleButtonRelease.bind(this);\n    this.state = {\n      time: {},\n      seconds: 5\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.setState({\n      message: this.state.message.replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n    });\n\n    if (this.state.message === \"\") {\n      return;\n    } else {\n      fetch('http://0.0.0.0:5000/api/v1/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          content: this.state.message,\n          isBot: false,\n          time: new Date().getTime() / 1000\n        })\n      }).then(res => {\n        if (res.status === 200) {\n          console.log(\"Send message successfully\");\n          res.json().then(postResponse => {\n            console.log(postResponse);\n            fetch('http://0.0.0.0:5000/api/v1/messages/reply', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n              },\n              body: JSON.stringify({\n                content: postResponse.content,\n                isBot: false,\n                time: new Date().getTime() / 1000\n              })\n            }).then(res => {\n              if (res.status === 200) {\n                console.log(\"Wait for reply ...\");\n              } else {\n                console.log(\"Some error occured\");\n              }\n            });\n          });\n        } else {\n          console.log(\"Some error occured\");\n        }\n      }).then(this.setState({\n        message: \"\"\n      }));\n    }\n  }\n\n  handleEnter(e) {\n    if (e.keyCode === 13) {\n      return this.handleSubmit(e);\n    }\n\n    return;\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleButtonPress() {\n    let buttonPressTimer;\n\n    if (this.state.alert) {\n      buttonPressTimer = setTimeout(() => SpeechRecognition.startListening({\n        continuous: true\n      }, {\n        language: 'vn-VN'\n      }), 200);\n    } else {\n      clearTimeout(buttonPressTimer);\n    }\n  }\n\n  handleButtonRelease() {\n    this.setState({\n      alert: false\n    });\n  }\n\n  render() {\n    const {\n      transcript,\n      resetTranscript\n    } = useSpeechRecognition();\n\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"SendMessageForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-input-width-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"MessageForm\",\n      onKeyUp: this.handleEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"message\",\n      id: \"outlined-multiline-static\",\n      fullWidth: false,\n      multiline: true,\n      rows: \"4\",\n      value: this.state.message,\n      placeholder: \"Type something here\",\n      className: \"chat-input\",\n      style: {\n        width: \"925px\"\n      },\n      margin: \"normal\",\n      variant: \"outlined\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: \"voice.png\",\n      alt: \"button\",\n      onTouchStart: this.handleButtonPress,\n      onTouchEnd: SpeechRecognition.stopListening,\n      onMouseDown: this.handleButtonPress,\n      onMouseUp: SpeechRecognition.stopListening,\n      onMouseLeave: SpeechRecognition.stopListening,\n      style: {\n        height: 30 + 'px',\n        width: 30 + 'px',\n        marginTop: 15 + 'px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, transcript, setInterval(resetTranscript, 1000)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Trihd/OneDrive/chatbot_NEW/frontend/src/components/SendMessageForm/index.js"],"names":["React","Component","TextField","SpeechRecognition","useSpeechRecognition","SendMessageForm","constructor","props","state","message","alert","handleEnter","bind","handleSubmit","onChange","handleButtonPress","handleButtonRelease","time","seconds","timer","startTimer","countDown","e","preventDefault","setState","replace","fetch","method","headers","Accept","body","JSON","stringify","content","isBot","Date","getTime","then","res","status","console","log","json","postResponse","keyCode","target","name","value","buttonPressTimer","setTimeout","startListening","continuous","language","clearTimeout","render","transcript","resetTranscript","browserSupportsSpeechRecognition","width","stopListening","height","marginTop","setInterval"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {TextField} from \"@material-ui/core\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\n// import Icon  from \"@material-ui/icons\";\nimport './style.css'\n\n\nexport default class SendMessageForm extends Component  {\n    constructor(props) {\n        super();\n        this.state = {\n            message: \"\",\n            alert:true\n        }\n        this.handleEnter = this\n            .handleEnter\n            .bind(this)\n        this.handleSubmit = this\n            .handleSubmit\n            .bind(this)\n        this.onChange = this\n            .onChange\n            .bind(this)\n        this.handleButtonPress = this\n            .handleButtonPress\n            .bind(this)\n        this.handleButtonRelease = this\n            .handleButtonRelease\n            .bind(this)\n        this.state = { time: {}, seconds: 5 };\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n    async handleSubmit(e) {\n        e.preventDefault()\n        await this.setState({\n            message: this\n                .state\n                .message\n                .replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n        })\n\n        if (this.state.message === \"\") {\n            return\n        } else {\n            fetch('http://0.0.0.0:5000/api/v1/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json'\n                },\n                body: JSON.stringify({\n                    content: this.state.message,\n                    isBot: false,\n                    time: (new Date().getTime()) / 1000\n                })\n            }).then(res => {\n                if (res.status === 200) {\n                    console.log(\"Send message successfully\")\n                    res\n                        .json()\n                        .then(postResponse => {\n                            console.log(postResponse);\n                            \n                            fetch('http://0.0.0.0:5000/api/v1/messages/reply', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    Accept: 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    content: postResponse.content,\n                                    isBot: false,\n                                    time: (new Date().getTime()) / 1000\n                                })\n                            }).then(res => {\n                                if (res.status === 200) {\n                                    console.log(\"Wait for reply ...\")\n                                } else {\n                                    console.log(\"Some error occured\");\n\n                                }\n                            })\n                        })\n\n                } else {\n                    console.log(\"Some error occured\");\n                }\n            }).then(this.setState({message: \"\"}))\n\n        }\n\n    }\n    handleEnter(e) {\n        if (e.keyCode === 13) {\n            return this.handleSubmit(e)\n        }\n        return\n    }\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    handleButtonPress () {\n        let buttonPressTimer\n        if(this.state.alert){\n            buttonPressTimer = setTimeout(() => SpeechRecognition.startListening({continuous: true }, { language: 'vn-VN' }), 200);\n        }\n        else{\n            clearTimeout(buttonPressTimer);\n        }\n    }\n    \n    handleButtonRelease () {\n\n        this.setState({\n            alert:false\n        })\n    }\n\n    render() {\n        const { transcript, resetTranscript } = useSpeechRecognition()\n            \n        if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n            return null\n        }\n        return (\n            <div className=\"SendMessageForm\">\n                <div className=\"chat-input-width-100\">\n                    <form className=\"MessageForm\" onKeyUp={this.handleEnter}>\n                        <TextField\n                            name=\"message\"\n                            id=\"outlined-multiline-static\"\n                            fullWidth={false}\n                            multiline\n                            rows=\"4\"\n                            value={this.state.message}\n                            placeholder=\"Type something here\"\n                            className=\"chat-input\"\n                            style={{\n                                width:\"925px\"\n                            }}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.onChange}/>   \n                        <img src=\"voice.png\" alt=\"button\" onTouchStart={this.handleButtonPress} \n                                onTouchEnd={SpeechRecognition.stopListening} \n                                onMouseDown={this.handleButtonPress} \n                                onMouseUp={SpeechRecognition.stopListening} \n                                onMouseLeave={SpeechRecognition.stopListening} style={{height:30+'px', width:30+'px', marginTop:15+'px'}}/>\n                        <p hidden>\n                            {transcript}\n                            {setInterval(resetTranscript,1000)}\n                        </p>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}