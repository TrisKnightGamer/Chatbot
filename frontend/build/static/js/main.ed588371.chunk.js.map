{"version":3,"sources":["components/Message/index.js","components/MessageList/index.js","components/SendMessageForm/index.js","components/BoxChat/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","align","OneMessageStyle","background","this","props","isBot","color","className","style","alignSelf","formatAlign","Paper","Typography","component","content","Component","MessageList","scrollToBottom","messagesEnd","scrollIntoView","state","msgList","setTimeout","console","log","fetch","res","json","data","setState","results","map","e","idx","key","float","clear","ref","el","SendMessageForm","message","handleEnter","bind","handleSubmit","onChange","preventDefault","replace","method","headers","Accept","body","JSON","stringify","time","Date","getTime","then","status","postResponse","keyCode","target","name","value","onKeyUp","type","onClick","src","alt","TextField","id","fullWidth","multiline","rows","placeholder","margin","variant","BoxChat","msg","Container","maxWidth","Card","Toolbar","newMsg","returnParent","getDataFromChild","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed588371.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Paper, Typography} from '@material-ui/core';\n\nimport './style.css'\nexport default class Message extends Component {\n\n    formatAlign(align){\n        if(align === 'left') {\n            return 'flex-start'\n        }\n        if(align === 'right') {\n            return 'flex-end'\n        }\n        return 'flex-end'\n    }\n    \n    render() {\n        const OneMessageStyle = {\n            background: this.props.isBot?'#ecf0f1':'#2e86de',\n            color: this.props.isBot?'black' :'white'\n        }\n        return (\n            <div className=\"Message\" style={{alignSelf:this.formatAlign(this.props.align)}}>\n               <Paper className=\"OneMessage\" style={OneMessageStyle}>\n                    <div className=\"MessageContent\">\n                        <Typography component=\"p\">\n                           {this.props.content}\n                        </Typography>\n                    </div>\n                </Paper>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport Message from \"../Message\";\nimport './style.css'\n\nexport default class MessageList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            msgList: null\n        }\n    }\n\n   scrollToBottom = () => {\n       this\n           .messagesEnd\n           .scrollIntoView();\n  }\n    \n    async componentDidUpdate() {\n        setTimeout(()=>{\n            console.log(\"Waiting for render message\") \n        }, 750)\n        const res = await fetch('http://192.168.1.253:5000/api/v1/messages');\n        const data = await res.json()\n        this.setState({msgList: data.results})\n        //this.scrollToBottom();\n    }\n    async componentDidMount() {\n        const res = await fetch('http://192.168.1.253:5000/api/v1/messages');\n        const data = await res.json()\n        console.log(data)\n        this.setState({msgList: data.results})\n        this.scrollToBottom();\n    }\n\n    render() {\n        return (\n            <div className=\"MessageContainer\">\n                <div className=\"MessageList\">\n                    {this.state.msgList\n                        ? this\n                            .state\n                            .msgList\n                            .map((e, idx) => {\n                                const align = (e.isBot === true)\n                                    ? 'left'\n                                    : 'right'\n                                return (<Message key={idx} isBot={e.isBot} align={align} content={e.content}/>)\n                            })\n                        : null\n}\n                    <div\n                        style={{\n                        float: \"left\",\n                        clear: \"both\"\n                    }}\n                        ref={(el) => {\n                        this.messagesEnd = el;\n                    }}></div>\n                </div>\n\n            </div>\n\n        );\n    }\n\n}\n// 0,Xin chào bot,hello\n// 1,Chào,hello\n// 2,Hello,hello\n// 3,Hế lô,hello\n// 4,Chào bạn,hello\n// 5,hey bot, giúp với,hello\n// 6,xin chào, giúp tui với,hello\n// 7,Hello bot,hello\n// 8,xin chào bạn,hello\n// 9,xin chào bot,hello\n// 10,Chào bot, ngày mới tốt lành,hello\n// 11,Chào buổi sáng,hello\n// 12,Chào buổi chiều,hello\n// 13,Chào buổi tối,hello\n// 14,hello,hello\n// 15,hi bot,hello\n// 16,nè bot ,hello\n// 17,Hi,hello\n// 18,bot ơi tui hỏi cái này tí,hello\n// 19,bot ơi tui có cái này muốn hỏi,hello\n// 20,bot ơi,hello\n// 21,aloooo,hello\n// 22,aloo bot,hello\n// 23,alooo bot ơi,hello\n// 24,bot đâu,hello\n// 25,bot ơi,hello\n// 26,bot đâu rồi ,hello\n// 0,giới_thiệu đi bot,introduction\n// 1,giới_thiệu,introduction\n// 2,bot vây,introduction\n// 3,khả_năng mày,introduction\n// 4,khả_năng,introduction\n// 5,khả_năng,introduction\n// 6,giới_thiệu đi,introduction\n// 7,giới_thiệu,introduction\n// 8,khả_năng,introduction\n// 9,kỹ_năng,introduction\n// 10,bot khả_năng,introduction\n// 11,who are you,introduction\n// 12,bot là gì vậy,introduction\n// 13,bot là ai,introduction\n// 14,bot là cái gì_vậy,introduction\n// 15,bạn là ai ,introduction\n// 16,bạn là gì,introduction\n// 17,hãy giới thiệu về bot đi,introduction","import React, {Component} from 'react'\nimport {TextField} from \"@material-ui/core\";\n// import Icon  from \"@material-ui/icons\";\nimport './style.css'\nexport default class SendMessageForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.handleEnter = this\n            .handleEnter\n            .bind(this)\n        this.handleSubmit = this\n            .handleSubmit\n            .bind(this)\n        this.onChange = this\n            .onChange\n            .bind(this)\n    }\n    async handleSubmit(e) {\n        e.preventDefault()\n        await this.setState({\n            message: this\n                .state\n                .message\n                .replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n        })\n\n        if (this.state.message === \"\") {\n            return\n        } else {\n            fetch('http://192.168.1.253:5000/api/v1/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json'\n                },\n                body: JSON.stringify({\n                    content: this.state.message,\n                    isBot: false,\n                    time: (new Date().getTime()) / 1000\n                })\n            }).then(res => {\n                if (res.status === 200) {\n                    console.log(\"Send message successfully\")\n                    res\n                        .json()\n                        .then(postResponse => {\n                            console.log(postResponse);\n                            \n                            fetch('http://192.168.1.253:5000/api/v1/messages/reply', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    Accept: 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    content: postResponse.content,\n                                    isBot: false,\n                                    time: (new Date().getTime()) / 1000\n                                })\n                            }).then(res => {\n                                if (res.status === 200) {\n                                    console.log(\"Wait for reply ...\")\n                                } else {\n                                    console.log(\"Some error occured\");\n\n                                }\n                            })\n                        })\n\n                } else {\n                    console.log(\"Some error occured\");\n                }\n            }).then(this.setState({message: \"\"}))\n\n        }\n\n    }\n    handleEnter(e) {\n        if (e.keyCode === 13) {\n            return this.handleSubmit(e)\n        }\n        return\n    }\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    render() {\n        return (\n            <div className=\"SendMessageForm\">\n                <div className=\"chat-input-width-100\">\n                    <form className=\"MessageForm\" onKeyUp={this.handleEnter}>\n                        <button className=\"sender\" type=\"button\" onClick={(e) => this.handleSubmit(e)}>\n                            <img src=\"/assets/img/send-button.png\" alt=\"\"/>\n                        </button>\n                        <TextField\n                            name=\"message\"\n                            id=\"outlined-multiline-static\"\n                            fullWidth={true}\n                            multiline\n                            rows=\"4\"\n                            value={this.state.message}\n                            placeholder=\"Type something here\"\n                            className=\"chat-input\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.onChange}/>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport {Card, Container, Toolbar, Typography} from \"@material-ui/core\";\nimport MessageList from '../MessageList';\nimport SendMessageForm from '../SendMessageForm';\nimport './style.css'\n\nexport default class BoxChat extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            msg:null\n        }\n    }\n    async getDataFromChild(msg) {\n        await this.setState({\n            msg:msg\n        })\n    }\n    render() {\n        return (\n            <div className=\"BoxChat\">\n                <Container maxWidth=\"md\" className=\"relative\">\n                    <div className=\"row\">\n                        <Card\n                            style={{\n                            \"height\": \"100vh\"\n                        }}>\n                            <Toolbar className=\"TopToolbarChatbot\">\n                                <Typography variant=\"h6\" color=\"inherit\">\n                                    Chat\n                                </Typography>\n                            </Toolbar>\n                            <MessageList newMsg={this.state.msg}/>\n                            <SendMessageForm returnParent={this.getDataFromChild.bind(this)}/>\n                        </Card>\n                    </div>\n\n                </Container>\n\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport BoxChat from \"./components/BoxChat\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxChat/>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}